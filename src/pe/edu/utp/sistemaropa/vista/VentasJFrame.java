/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pe.edu.utp.sistemaropa.vista;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import pe.edu.utp.sistemaropa.DaoImpl.FacturaDaoImpl;
import pe.edu.utp.sistemaropa.DaoImpl.VentaDaoImpl;
import pe.edu.utp.sistemaropa.config.Conexion;
import pe.edu.utp.sistemaropa.dto.Factura;
import pe.edu.utp.sistemaropa.dto.Venta;

/**
 *
 * @author Cristian
 */
public class VentasJFrame extends javax.swing.JFrame {

    Venta v = new Venta();
    VentaDaoImpl ven = new VentaDaoImpl();

    Factura f = new Factura();
    FacturaDaoImpl fac = new FacturaDaoImpl();
    DefaultTableModel modelo = new DefaultTableModel();

    private PreparedStatement ps;
    private ResultSet rs;
    private Connection conex;
    private Timer timer;
 FondoPanel fondo = new FondoPanel();
    public VentasJFrame() {
        this.setContentPane(fondo);
        initComponents();
        txtFechaHora.setEditable(false);

        this.cbxCliente.setModel(obtenerCliente());

        this.cbxProducto.setModel(obtenerProducto());

        this.cbxTipoPago.setModel(TipoDePago());

        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                txtFechaHora.setText("" + fechaActual() + " " + horaActual());
            }
        });
        timer.start();

        txtFechaHora.setText("" + fechaActual() + " " + horaActual());
        String a[] = {"Producto", "Cantidad", "Precio"};
        setLocationRelativeTo(null);
        modelo.setColumnIdentifiers(a);
        tbClienteCarrito.setModel(modelo);
    }

    public static String fechaActual() {
        Date fecha = new Date();
        SimpleDateFormat formatoFecha = new SimpleDateFormat("YYYY-MM-dd");
        return formatoFecha.format(fecha);
    }

    public static String horaActual() {
        LocalTime hora = LocalTime.now();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("HH:mm:ss");
        return hora.format(formato);
    }

    void nuevo() {
        cbxCliente.setSelectedItem("Seleccionar");
        cbxComprobante.setSelectedItem("Seleccionar");
        cbxProducto.setSelectedItem("Seleccionar");
        cbxTipoPago.setSelectedItem("Seleccionar");

        txtAPagar.setText("");
        txtCantidad.setText("");
        txtDni.setText("");
        txtImporteTotal.setText("");
        txtPrecioUnit.setText("");
        txtRuc.setText("");
        txtVuelto.setText("");

        txtArea.setText("");
        DefaultTableModel model = (DefaultTableModel) tbClienteCarrito.getModel();
        model.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cbxCliente = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbxProducto = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        btnListar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtPrecioUnit = new javax.swing.JTextField();
        btnNuevo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFechaHora = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbClienteCarrito = new javax.swing.JTable();
        txtDni = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtRuc = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cbxTipoPago = new javax.swing.JComboBox<>();
        btnSalir = new javax.swing.JButton();
        txtImporteTotal = new javax.swing.JTextField();
        txtAPagar = new javax.swing.JTextField();
        txtVuelto = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnPagar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        cbxComprobante = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Ink Free", 1, 48)); // NOI18N
        jLabel6.setText("Venta");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("SELECCIÃ“N"));

        jLabel4.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel4.setText("CLIENTE");

        cbxCliente.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N
        cbxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxClienteMouseClicked(evt);
            }
        });
        cbxCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxClienteActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel5.setText("PRODUCTO");

        cbxProducto.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N
        cbxProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProductoActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel7.setText("CANTIDAD");

        txtCantidad.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N

        btnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/sistemaropa/img/Selecccionar.png"))); // NOI18N
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/sistemaropa/img/exit.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/sistemaropa/img/refresh_.png"))); // NOI18N
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel13.setText("PRECIO UNIT");

        txtPrecioUnit.setEditable(false);
        txtPrecioUnit.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N
        txtPrecioUnit.setEnabled(false);

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/sistemaropa/img/clear.png"))); // NOI18N
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addComponent(jLabel13))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxCliente, 0, 244, Short.MAX_VALUE)
                            .addComponent(cbxProducto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCantidad)
                            .addComponent(txtPrecioUnit))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnListar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar)
                        .addGap(12, 12, 12)
                        .addComponent(btnNuevo)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbxProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtPrecioUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListar)
                    .addComponent(btnEditar)
                    .addComponent(btnNuevo)
                    .addComponent(btnEliminar))
                .addGap(29, 29, 29))
        );

        jLabel1.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel1.setText("DNI:");

        jLabel3.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel3.setText("FECHA y HORA:");

        txtFechaHora.setEditable(false);
        txtFechaHora.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFechaHora.setToolTipText("");
        txtFechaHora.setEnabled(false);
        txtFechaHora.setFocusable(false);

        tbClienteCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "NOMBRE", "APELLIDO", "DNI", "TELÃ‰FONO", "DIRECCIÃ“N", "RUC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbClienteCarrito.getTableHeader().setReorderingAllowed(false);
        tbClienteCarrito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbClienteCarritoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbClienteCarrito);

        txtDni.setEditable(false);
        txtDni.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel2.setText("RUC:");

        txtRuc.setEditable(false);
        txtRuc.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel8.setText("TIPO DE PAGO");

        cbxTipoPago.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N
        cbxTipoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/sistemaropa/img/regresar.png"))); // NOI18N
        btnSalir.setContentAreaFilled(false);
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtImporteTotal.setEditable(false);
        txtImporteTotal.setEnabled(false);

        txtAPagar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAPagarKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAPagarKeyTyped(evt);
            }
        });

        txtVuelto.setEditable(false);
        txtVuelto.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel9.setText("IMPORTE");

        jLabel10.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel10.setText("SOLES");

        jLabel11.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel11.setText("VUELTO");

        btnPagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/sistemaropa/img/money_43847.png"))); // NOI18N
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        txtArea.setEditable(false);
        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.setEnabled(false);
        txtArea.setOpaque(false);
        jScrollPane2.setViewportView(txtArea);

        jButton1.setText("Procesar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/sistemaropa/img/Imp.png"))); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
        jLabel12.setText("COMPROBANTE");

        cbxComprobante.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N
        cbxComprobante.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Boleta", "Factura" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnSalir)
                        .addGap(274, 274, 274)
                        .addComponent(jLabel6)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel12))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbxComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAPagar)
                            .addComponent(txtImporteTotal)
                            .addComponent(txtVuelto, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnPagar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnImprimir, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(btnSalir)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cbxTipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(cbxComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtImporteTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jButton1))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(btnPagar))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtVuelto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(btnImprimir))))
                .addGap(34, 34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbxClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxClienteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxClienteMouseClicked

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        MenuVendedoresJFrame a = new MenuVendedoresJFrame();

        int confirm = JOptionPane.showConfirmDialog(a, "Â¿Desea salir?", "ConfirmaciÃ³n de Salida", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            a.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cbxClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxClienteActionPerformed
        DarDNIyRUC();
    }//GEN-LAST:event_cbxClienteActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        try {
            ActualizarVenta();

            cbxComprobante.setSelectedItem("Seleccionar");
            cbxTipoPago.setSelectedItem("Seleccionar");

            txtAPagar.setText("");
            txtCantidad.setText("");
            txtPrecioUnit.setText("");
            txtVuelto.setText("");

            txtArea.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(VentasJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        ListarCarrito();
    }//GEN-LAST:event_btnListarActionPerformed

    private void cbxProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProductoActionPerformed
        String pro = cbxProducto.getSelectedItem().toString();
        if (!"Seleccionar".equals(pro)) {
            double a = getPrecioUni(pro);
            txtPrecioUnit.setText("" + a);
        } else {
            txtPrecioUnit.setText("");
        }

    }//GEN-LAST:event_cbxProductoActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        nuevo();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void tbClienteCarritoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbClienteCarritoMouseClicked
        ObtenerDatosTabla();
    }//GEN-LAST:event_tbClienteCarritoMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        EliminarFila();
        cbxComprobante.setSelectedItem("Seleccionar");
        cbxProducto.setSelectedItem("Seleccionar");
        cbxTipoPago.setSelectedItem("Seleccionar");

        txtAPagar.setText("");
        txtCantidad.setText("");
        txtImporteTotal.setText("");
        txtPrecioUnit.setText("");
        txtVuelto.setText("");

        txtArea.setText("");

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtAPagarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAPagarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAPagarKeyPressed

    private void txtAPagarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAPagarKeyTyped
        Character c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }
    }//GEN-LAST:event_txtAPagarKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Procesar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        pagar();
        cbxCliente.setSelectedItem("Seleccionar");
        cbxComprobante.setSelectedItem("Seleccionar");
        cbxProducto.setSelectedItem("Seleccionar");
        cbxTipoPago.setSelectedItem("Seleccionar");

        txtAPagar.setText("");
        txtCantidad.setText("");
        txtDni.setText("");
        txtImporteTotal.setText("");
        txtPrecioUnit.setText("");
        txtRuc.setText("");
        txtVuelto.setText("");

        DefaultTableModel model = (DefaultTableModel) tbClienteCarrito.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnPagarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        try {
            txtArea.print();
        } catch (PrinterException ex) {
            Logger.getLogger(VentasJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtArea.setText("");

    }//GEN-LAST:event_btnImprimirActionPerformed
    void ListarCarrito() {
        String cli = cbxCliente.getSelectedItem().toString();
        String pro = cbxProducto.getSelectedItem().toString();
        String can = txtCantidad.getText();
        if (cli.isEmpty() || pro.isEmpty() || can.isEmpty()) {
            JOptionPane.showMessageDialog(null, "COMPLETAR LOS DATOS POR FAVOR");
        } else {
            if (!"Seleccionar".equals(cli) && !"Seleccionar".equals(pro)) {

                double a = this.getPrecioProducto(pro);
                int cant = Integer.parseInt(can);

                //nombre del producto, cantidad, precio de preciouni * cantidad
                Double va  = a * cant;
                Object[] rowData = {
                    pro,
                    can,
                    va,
                };
                modelo.addRow(rowData);

                cbxProducto.setSelectedItem("Seleccionar");
                txtCantidad.setText("");
                Calcular();
                txtCantidad.requestFocus();
            }

        }
    }

    private static String formatDecimal(double number) {
        DecimalFormat vt = new DecimalFormat("#,##0.00");
        return vt.format(number);
    }

    void Procesar() {
        if (txtAPagar.getText().isEmpty() && !"Seleccionar".equals(cbxTipoPago.getSelectedItem().toString()) && !"Seleccionar".equals(cbxComprobante.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(null, "Ingrese datos de compra, por favor");
        } else {
            double Vuelto = 0;
            double TOTAL = 0;
            double Presupuesto = 0;

            try {
                String t = txtAPagar.getText();
                String it = txtImporteTotal.getText();
                int tt = Integer.parseInt(t);
                int itt = Integer.parseInt(it);
                if (tt > itt) {
                    Presupuesto = Double.parseDouble(txtAPagar.getText());
                    TOTAL = Double.parseDouble(txtImporteTotal.getText());
                    Vuelto = Presupuesto - TOTAL;

                    String formattedVuelto = formatDecimal(Vuelto);
                    txtVuelto.setText(formattedVuelto);
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese un monto mayor al importe");

                }

                try {
                    txtArea.setText(txtArea.getText() + "                         Saint Marcos bistro\n");
                    txtArea.setText(txtArea.getText() + "                         Moda y Estilos\n");
                    txtArea.setText(txtArea.getText() + "                         777 555329043\n");
                    txtArea.setText(txtArea.getText() + "---------------------------------------------------------------------\n");
                    txtArea.setText(txtArea.getText() + "  Item                  \t\tCantidad                  \tPrecioxCant\n");
                    txtArea.setText(txtArea.getText() + "---------------------------------------------------------------------\n");

                    DefaultTableModel df = (DefaultTableModel) tbClienteCarrito.getModel();

                    for (int i = 0; i < tbClienteCarrito.getRowCount(); i++) {
                        String Producto = df.getValueAt(i, 0).toString();
                        String Cantidad = df.getValueAt(i, 1).toString();
                        String Precio = df.getValueAt(i, 2).toString();
                        txtArea.setText(txtArea.getText() + "  " + Producto + "\t\t" + Cantidad + "\t" + Precio + "\n");
                    }

                    txtArea.setText(txtArea.getText() + "---------------------------------------------------------------------\n");
                    txtArea.setText(txtArea.getText() + "Nombre: " + cbxCliente.getSelectedItem().toString() + "\n");
                    txtArea.setText(txtArea.getText() + "DNI : " + txtDni.getText() + "\n");
                    txtArea.setText(txtArea.getText() + "RUC      : " + txtRuc.getText() + "\n");
                    txtArea.setText(txtArea.getText() + "Fecha y Hora  : " + fechaActual() + "\n");
                    txtArea.setText(txtArea.getText() + "Hora           : " + horaActual() + "\n");
                    txtArea.setText(txtArea.getText() + "Importe  : " + txtImporteTotal.getText() + "\n");
                    txtArea.setText(txtArea.getText() + "Soles  : " + txtAPagar.getText() + "\n");
                    txtArea.setText(txtArea.getText() + "Vuelto  : " + txtVuelto.getText() + "\n");
                    txtArea.setText(txtArea.getText() + "---------------------------------------------------------------------\n");

                } catch (Exception e) {
                    System.out.println(e);
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese montos vÃ¡lidos");
            }
        }
    }

    private void Calcular() {
        DecimalFormat sf = new DecimalFormat("#.##");
        sf.setMaximumFractionDigits(2);
        double suma = 0;
        for (int i = 0; i < tbClienteCarrito.getRowCount(); i++) {
            double renglon;
            renglon = Double.parseDouble(tbClienteCarrito.getValueAt(i, 2).toString());
            suma = suma + renglon;
        }
        txtImporteTotal.setText(sf.format(suma));
    }

    public ResultSet consulta(String sql) {
        rs = null;
        try {
            conex = Conexion.getConexion();
            ps = conex.prepareStatement(sql);
            rs = ps.executeQuery();
        } catch (SQLException e) {
            System.out.println("Error de Consulta: " + e);
        }
        return rs;
    }

    public void DarDNIyRUC() {
        String cliente = cbxCliente.getSelectedItem().toString();

        if (!"Seleccionar".equals(cliente)) {
            String sql = "SELECT Ruc, Dni FROM cliente WHERE Nombre = ?";
            ResultSet rs = consultaRUCyDNI(sql, cliente);

            try {
                if (rs.next()) {
                    String ruc = rs.getString("Ruc");
                    int dni = rs.getInt("Dni");

                    txtRuc.setText(ruc);
                    txtDni.setText(Integer.toString(dni));
                } else {
                    txtRuc.setText("");
                    txtDni.setText("");
                    System.out.println("No se encontrÃ³ ningÃºn cliente con el nombre " + cliente);
                }
            } catch (SQLException e) {
                System.out.println("Error al obtener los datos del cliente: " + e);
            }
        } else {
            txtRuc.setText("");
            txtDni.setText("");
        }
    }

    public DefaultComboBoxModel obtenerCliente() {
        DefaultComboBoxModel ListaModelo = new DefaultComboBoxModel();
        ListaModelo.addElement("Seleccionar");
        rs = this.consulta("SELECT Nombre FROM cliente;");
        try {
            while (rs.next()) {
                ListaModelo.addElement(rs.getString("Nombre"));
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Error Obtener Cliente: " + e);
        }
        return ListaModelo;
    }

    public ResultSet consultaRUCyDNI(String sql, String nombreCliente) {
        ResultSet rs = null;
        try {
            Connection conex = Conexion.getConexion();
            PreparedStatement ps = conex.prepareStatement(sql);
            ps.setString(1, nombreCliente);
            rs = ps.executeQuery();
        } catch (SQLException e) {
            System.out.println("Error de Consulta: " + e);
        }
        return rs;
    }

    public DefaultComboBoxModel obtenerProducto() {
        DefaultComboBoxModel ListaModelo = new DefaultComboBoxModel();
        ListaModelo.addElement("Seleccionar");
        rs = this.consulta("SELECT Nombre FROM producto;");
        try {
            while (rs.next()) {
                ListaModelo.addElement(rs.getString("Nombre"));
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Error Obtener Producto: " + e);
        }
        return ListaModelo;
    }

    public DefaultComboBoxModel TipoDePago() {
        DefaultComboBoxModel ListaModelo = new DefaultComboBoxModel();
        ListaModelo.addElement("Seleccionar");
        rs = this.consulta("SELECT NombreTipoDePago FROM mydb.tipodepago;");
        try {
            while (rs.next()) {
                ListaModelo.addElement(rs.getString("NombreTipoDePago"));
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Error Obtener Tipo de Pago: " + e);
        }
        return ListaModelo;
    }

    public int getIdCliente(String nombre) {
        int idCliente = -1;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            String query = "SELECT IdCliente FROM cliente WHERE Nombre = ?";
            statement = conex.prepareStatement(query);
            statement.setString(1, nombre); // Asignar el parÃ¡metro del nombre del cliente

            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                idCliente = resultSet.getInt("IdCliente");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el ID del cliente: " + e.getMessage());
        }
        return idCliente;
    }

    public int getIdProducto(String nombre) {
        int idCliente = -1;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            String query = "SELECT IdProducto FROM producto WHERE Nombre = ?";
            statement = conex.prepareStatement(query);
            statement.setString(1, nombre);

            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                idCliente = resultSet.getInt("IdProducto");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el ID del producto: " + e.getMessage());
        }
        return idCliente;
    }

    public int getIdTipoDePago(String nombre) {
        int idCliente = -1;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            String query = "SELECT IdTipoDePago FROM tipodepago WHERE NombreTipoDePago = ?";
            statement = conex.prepareStatement(query);
            statement.setString(1, nombre);

            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                idCliente = resultSet.getInt("IdTipoDePago");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el ID de tipo de pago: " + e.getMessage());
        }
        return idCliente;
    }

    public int getPrecioProducto(String nombre) {
        int idCliente = -1;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            String query = "SELECT Precio FROM producto WHERE Nombre = ?";
            statement = conex.prepareStatement(query);
            statement.setString(1, nombre);

            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                idCliente = resultSet.getInt("Precio");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el precio: " + e.getMessage());
        }
        return idCliente;
    }

    public int getPrecioUni(String nombre) {
        int idCliente = -1;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            String query = "SELECT Precio FROM producto WHERE Nombre = ?";
            statement = conex.prepareStatement(query);
            statement.setString(1, nombre);

            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                idCliente = resultSet.getInt("Precio");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el precio del producto: " + e.getMessage());
        }
        return idCliente;
    }

    public int getIdVenta(int idCliente, int idTipoDePago, int idVendedor) {
        int idVenta = -1;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        try {
            String query = "SELECT IdVenta FROM venta WHERE IdCliente = ? AND IdTipoDePago = ? AND IdVendedor = ?";
            statement = conex.prepareStatement(query);
            statement.setInt(1, idCliente);
            statement.setInt(2, idTipoDePago);
            statement.setInt(3, idVendedor);

            resultSet = statement.executeQuery();

            if (resultSet.next()) {
                idVenta = resultSet.getInt("IdVenta");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el ID de la venta: " + e.getMessage());
        }
        return idVenta;
    }

    void ObtenerDatosTabla() {
        modelo = (DefaultTableModel) tbClienteCarrito.getModel();

        int selectedRow = tbClienteCarrito.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila de la tabla");
        } else {
            String can = modelo.getValueAt(selectedRow, 1).toString();
            String preciounit = modelo.getValueAt(selectedRow, 2).toString();

            int canti = Integer.parseInt(can);
            double pu = Double.parseDouble(preciounit);

            txtCantidad.setText("" + canti);
            txtPrecioUnit.setText("" + pu);
        }
    }

    void ActualizarVenta() throws SQLException {
        modelo = (DefaultTableModel) tbClienteCarrito.getModel();

        int selectedRow = tbClienteCarrito.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "SELECCIONE UNA FILA");
        } else {
            String ca = txtCantidad.getText();

            if (!ca.isEmpty()) {
                try {
                    int cantidad = Integer.parseInt(ca);
                    modelo.setValueAt(cantidad, selectedRow, 1);
                    JOptionPane.showMessageDialog(null, "ACTUALIZACIÃ“N CORRECTA");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "INGRESE CORRECTAMENTE LA CANTIDAD");
                }
            } else {
                JOptionPane.showMessageDialog(null, "SELECCIONE LOS DATOS BIEN");
            }
        }
    }

    void EliminarFila() {
        modelo = (DefaultTableModel) tbClienteCarrito.getModel();

        int selectedRow = tbClienteCarrito.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "SELECCIONE UNA FILA");
        } else {
            modelo.removeRow(selectedRow);
            JOptionPane.showMessageDialog(null, "PRODUCTO ELIMINADO");
        }
    }

    void pagar() {
        String a = cbxCliente.getSelectedItem().toString();
        String ef = cbxTipoPago.getSelectedItem().toString();
        String compro = cbxComprobante.getSelectedItem().toString();
        System.out.println("" + a + "" + ef + "" + compro);
        String pago = txtAPagar.getText();
        String vuelto = txtVuelto.getText();
        String total = txtImporteTotal.getText();

        double pg = Double.parseDouble(pago);
        double vu = Double.parseDouble(vuelto);
        double to = Double.parseDouble(total);

        String fh = "" + fechaActual() + " " + horaActual();
        int idCli = this.getIdCliente(a);
        int idTP = this.getIdTipoDePago(ef);
        int idVE = 1; //Bueno

        v.setPago(pg);
        v.setVuelto(vu);
        v.setTotal(to);
        v.setFecha(fh);
        v.setIdCliente(idCli);
        v.setIdTipoDePago(idTP);
        v.setIdVendedor(idVE);

        ven.create(v);

        if (compro == "Factura" && !"Seleccionar".equals(compro)) {

            int idVenta = this.getIdVenta(idCli, idTP, idVE);

            String dni = txtDni.getText();

            int d = Integer.parseInt(dni);

            System.out.println("" + idVenta);

            f.setNombre(a);
            f.setDNI(d);
            f.setTotal(to);
            f.setVuelto(vu);
            f.setIdVenta(idVenta);
            fac.create(f);
            JOptionPane.showMessageDialog(null, "FACTURA REGISTRADA");

        }
    }

    //nombre del producto, cantidad, precio de preciouni * cantidad
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentasJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentasJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentasJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentasJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentasJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxCliente;
    private javax.swing.JComboBox<String> cbxComprobante;
    private javax.swing.JComboBox<String> cbxProducto;
    private javax.swing.JComboBox<String> cbxTipoPago;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbClienteCarrito;
    private javax.swing.JTextField txtAPagar;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtFechaHora;
    private javax.swing.JTextField txtImporteTotal;
    private javax.swing.JTextField txtPrecioUnit;
    private javax.swing.JTextField txtRuc;
    private javax.swing.JTextField txtVuelto;
    // End of variables declaration//GEN-END:variables
class FondoPanel extends JPanel {
        private Image imagen;

        public FondoPanel() {
            // Cargar la imagen en el constructor del panel
            URL imageURL = getClass().getResource("/pe/edu/utp/sistemaropa/img/fondorosa.png");
            if (imageURL != null) {
                imagen = new ImageIcon(imageURL).getImage();
            } else {
                System.err.println("La imagen no se encuentra en la ruta especificada.");
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (imagen != null) {
                g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            }
        }
    }
}

